// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TravelPlanner.Data;

namespace TravelPlanner.Migrations
{
    [DbContext(typeof(SqlDbContext))]
    partial class SqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("TravelPlanner.Data.CafeResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AveragePrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CafeAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CafeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CafeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Rate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URL")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("CafeResults");
                });

            modelBuilder.Entity("TravelPlanner.Data.CityResult", b =>
                {
                    b.Property<int>("ID2")
                        .HasColumnType("int");

                    b.Property<string>("AdministrativeArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("County")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID2");

                    b.ToTable("CityResults");
                });

            modelBuilder.Entity("TravelPlanner.Data.LocationInformation", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("LocationInformations");
                });

            modelBuilder.Entity("TravelPlanner.Data.WeatherResult", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DaySummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeadlineText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NightSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TempDay")
                        .HasColumnType("float");

                    b.Property<double>("TempNight")
                        .HasColumnType("float");

                    b.HasKey("ID");

                    b.HasIndex("CityID");

                    b.ToTable("WeatherResults");
                });

            modelBuilder.Entity("TravelPlanner.Data.CafeResult", b =>
                {
                    b.HasOne("TravelPlanner.Data.LocationInformation", null)
                        .WithMany("CafeResults")
                        .HasForeignKey("CityID");
                });

            modelBuilder.Entity("TravelPlanner.Data.WeatherResult", b =>
                {
                    b.HasOne("TravelPlanner.Data.LocationInformation", null)
                        .WithMany("WeatherResults")
                        .HasForeignKey("CityID");
                });

            modelBuilder.Entity("TravelPlanner.Data.LocationInformation", b =>
                {
                    b.Navigation("CafeResults");

                    b.Navigation("WeatherResults");
                });
#pragma warning restore 612, 618
        }
    }
}
